// <auto-generated />
using System;
using AuthService.Adapters.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthService.Adapters.Migrations
{
    [DbContext(typeof(AuthServiceContext))]
    [Migration("20250413120513_Auth_NewVars01")]
    partial class Auth_NewVars01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthService.Adapters.Database.Models.Invite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("InheritanceUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("Ttl")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InheritanceUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Invites", "AuthService");
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.InvitePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowInheritance")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InviteId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InviteId");

                    b.HasIndex("PermissionId");

                    b.ToTable("InvitePermissions", "AuthService");
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.InviteVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InviteId")
                        .HasColumnType("integer");

                    b.Property<int>("Name")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InviteId");

                    b.HasIndex("Name");

                    b.ToTable("InviteVariables", "AuthService");
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.RefPermission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RefPermissions", "AuthService");

                    b.HasData(
                        new
                        {
                            Id = 1024,
                            Description = "Root",
                            Name = "RootPermission"
                        },
                        new
                        {
                            Id = 2000,
                            Description = "Просмотр Swagger",
                            Name = "Swagger"
                        },
                        new
                        {
                            Id = 52000,
                            Description = "[Статьи] Создание новых",
                            Name = "ArticleCreating"
                        },
                        new
                        {
                            Id = 52001,
                            Description = "[Статьи] Внесение изменений",
                            Name = "ArticleEditing"
                        },
                        new
                        {
                            Id = 52002,
                            Description = "[Статьи] Закрепление",
                            Name = "ArticlePinning"
                        },
                        new
                        {
                            Id = 52003,
                            Description = "[Статьи] Удаление",
                            Name = "ArticleRemoving"
                        },
                        new
                        {
                            Id = 53000,
                            Description = "Смена имени пользователя",
                            Name = "AuthUsernameChanging"
                        },
                        new
                        {
                            Id = 53001,
                            Description = "Смена пароля",
                            Name = "AuthPasswordChanging"
                        },
                        new
                        {
                            Id = 53002,
                            Description = "Ссылки-приглашения",
                            Name = "AuthInviteLinks"
                        },
                        new
                        {
                            Id = 53003,
                            Description = "Многоразовые ссылки-приглашения",
                            Name = "AuthReusableInviteLinks"
                        },
                        new
                        {
                            Id = 53004,
                            Description = "Наследование прав по ссылкам-приглашениям",
                            Name = "AuthInheritanceInviteLinks"
                        },
                        new
                        {
                            Id = 53005,
                            Description = "Изменение переменных (Security None)",
                            Name = "AuthChangingNoneSecureVariables"
                        },
                        new
                        {
                            Id = 53006,
                            Description = "Изменение переменных (Security Low)",
                            Name = "AuthChangingLowSecureVariables"
                        },
                        new
                        {
                            Id = 53007,
                            Description = "Изменение переменных (Security Medium)",
                            Name = "AuthChangingMediumSecureVariables"
                        },
                        new
                        {
                            Id = 53008,
                            Description = "Изменение переменных (Security High)",
                            Name = "AuthChangingHighSecureVariables"
                        },
                        new
                        {
                            Id = 53009,
                            Description = "Изменение переменных (Security Critical)",
                            Name = "AuthChangingCriticalSecureVariables"
                        });
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.RefVariable", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RefVariables", "AuthService");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Description = "Отображаемое имя",
                            Name = "DisplayName",
                            Type = "String"
                        },
                        new
                        {
                            Id = 1,
                            Description = "TTL ссылки-приглашения (минуты)",
                            Name = "MaxLinkTTL",
                            Type = "Int32"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Количество одновременных ссылок-приглашений",
                            Name = "MaximumInviteLinks",
                            Type = "Int32"
                        });
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<int?>("InvitedById")
                        .HasColumnType("integer");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("InvitedById")
                        .IsUnique();

                    b.HasIndex("Username");

                    b.ToTable("Users", "AuthService");
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowInheritance")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissions", "AuthService");
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.UserVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Name")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("UserId");

                    b.ToTable("UserVariables", "AuthService");
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.Invite", b =>
                {
                    b.HasOne("AuthService.Adapters.Database.Models.User", "InheritanceUser")
                        .WithMany("InheritedInvites")
                        .HasForeignKey("InheritanceUserId");

                    b.HasOne("AuthService.Adapters.Database.Models.User", "User")
                        .WithMany("Invites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InheritanceUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.InvitePermission", b =>
                {
                    b.HasOne("AuthService.Adapters.Database.Models.Invite", "Invite")
                        .WithMany("Permissions")
                        .HasForeignKey("InviteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Adapters.Database.Models.RefPermission", "RefPermission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invite");

                    b.Navigation("RefPermission");
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.InviteVariable", b =>
                {
                    b.HasOne("AuthService.Adapters.Database.Models.Invite", "Invite")
                        .WithMany("Variables")
                        .HasForeignKey("InviteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Adapters.Database.Models.RefVariable", "RefVariable")
                        .WithMany()
                        .HasForeignKey("Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invite");

                    b.Navigation("RefVariable");
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.User", b =>
                {
                    b.HasOne("AuthService.Adapters.Database.Models.User", "InvitedBy")
                        .WithOne()
                        .HasForeignKey("AuthService.Adapters.Database.Models.User", "InvitedById");

                    b.Navigation("InvitedBy");
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.UserPermission", b =>
                {
                    b.HasOne("AuthService.Adapters.Database.Models.RefPermission", "RefPermission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Adapters.Database.Models.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefPermission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.UserVariable", b =>
                {
                    b.HasOne("AuthService.Adapters.Database.Models.RefVariable", "RefVariable")
                        .WithMany()
                        .HasForeignKey("Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Adapters.Database.Models.User", "User")
                        .WithMany("Variables")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefVariable");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.Invite", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Variables");
                });

            modelBuilder.Entity("AuthService.Adapters.Database.Models.User", b =>
                {
                    b.Navigation("InheritedInvites");

                    b.Navigation("Invites");

                    b.Navigation("Permissions");

                    b.Navigation("Variables");
                });
#pragma warning restore 612, 618
        }
    }
}
